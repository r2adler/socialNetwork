{"version":3,"file":"static/js/779.3a28f014.chunk.js","mappings":"4QACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAA2G,0B,UCA3G,EAA6B,+B,SCuB7B,EAdwC,SAACA,GAErC,OACIC,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAACE,EAAAA,GAAO,CACJC,GAAE,YAAAC,OAAcL,EAAMM,IACtBC,UAAW,SAAAC,GAAU,OAAAA,EAARC,SAAyBC,OAAeC,CAAS,EAACT,SAE9DF,EAAMY,QAIvB,ECXA,EANkC,SAACZ,GACjC,OACEC,EAAAA,EAAAA,KAAA,OAAAC,SAAOF,EAAMa,SAEjB,E,kDC8BA,EAzBoB,WAChB,IAAMC,GAASC,EAAAA,EAAAA,KAAwB,SAACC,GAAK,OAAKA,EAAMC,KAAKH,MAAM,IAC7DI,GAAWH,EAAAA,EAAAA,KAAmC,SAAAC,GAAK,OAAIA,EAAMG,YAAYD,QAAQ,IAGjFE,GAFUL,EAAAA,EAAAA,KAAkC,SAAAC,GAAK,OAAIA,EAAMG,YAAYE,OAAO,IAEpDC,KAAI,SAAAC,GAAG,OAAItB,EAAAA,EAAAA,KAACuB,EAAU,CAACZ,KAAMW,EAAIX,KAAMN,GAAIiB,EAAIjB,IAASiB,EAAIjB,GAAK,IAC3FmB,EAAkBP,EAASI,KAAI,SAAAC,GAAG,OAAItB,EAAAA,EAAAA,KAACyB,EAAO,CAACb,QAASU,EAAIV,SAAcU,EAAIjB,GAAK,IAEzF,OAAKQ,GAKDa,EAAAA,EAAAA,MAAA,OAAKpB,UAAWG,EAAUR,SAAA,EACtBD,EAAAA,EAAAA,KAAA,OAAKM,UAAWG,EAAeR,SAC1BkB,KAELO,EAAAA,EAAAA,MAAA,OAAKpB,UAAWG,EAAWR,SAAA,EACvBD,EAAAA,EAAAA,KAAA,OAAAC,SAAMuB,KACNxB,EAAAA,EAAAA,KAAC2B,EAAc,WAVhB3B,EAAAA,EAAAA,KAAC4B,EAAAA,GAAQ,CAACzB,GAAI,UAc7B,EAOawB,EAAiB,WAC1B,IAAME,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,eAAgB,IAEpBC,SAAU,SAACC,GACP,IAAMC,EAA0B,CAAC,EAMjC,OALKD,EAAOF,eAEDE,EAAOF,eAAeI,OAAS,KACtCD,EAAOH,eAAiB,2CAFxBG,EAAOH,eAAiB,WAIrBG,CACX,EACAE,SAAU,SAAAH,GACNL,EAAOS,YACPX,EAASY,EAAAA,EAAAA,YAA2B,CAACP,eAAgBE,EAAOF,iBAChE,IAGJ,OACIR,EAAAA,EAAAA,MAAA,QAAMa,SAAUR,EAAOW,aAAazC,SAAA,EAChCyB,EAAAA,EAAAA,MAAA,OAAAzB,SAAA,EACID,EAAAA,EAAAA,KAAA,YAAA2C,EAAAA,EAAAA,GAAA,CAAUC,YAAa,sBAA0Bb,EAAOc,cAAc,oBACrEd,EAAOM,OAAOH,gBAAkBH,EAAOe,QAAQZ,gBAC5ClC,EAAAA,EAAAA,KAAA,OAAK+C,MAAO,CAACC,MAAO,OAAO/C,SAAE8B,EAAOM,OAAOH,iBAAwB,SAE3ElC,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAAA,UAAQiD,KAAM,SAAShD,SAAC,aAIxC,C","sources":["webpack://samuray_way_functional_react_redux_toolkit/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samuray_way_functional_react_redux_toolkit/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__cp5-f\",\"dialogsItems\":\"Dialogs_dialogsItems__M96Xv\",\"messages\":\"Dialogs_messages__2ZVOW\"};","// extracted by mini-css-extract-plugin\nexport default {\"activeLink\":\"DialogItem_activeLink__OsJQr\"};","import {NavLink} from 'react-router-dom'\nimport {FC} from 'react'\nimport s from './DialogItem.module.css'\n\n\ninterface DialogItemProps {\n    name: string\n    id: number\n}\n\nconst DialogItem: FC<DialogItemProps> = (props) => {\n\n    return (\n        <div>\n            <NavLink\n                to={`/dialogs/${props.id}`}\n                className={({isActive}) => isActive ? s.activeLink : undefined}\n            >\n                {props.name}\n            </NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem","import { FC } from \"react\"\n\ninterface MessageProps {\n  message: string\n}\nconst Message: FC<MessageProps> = (props) => {\n  return (\n    <div >{props.message}</div>\n  )\n}\n\nexport default Message","import s from './Dialogs.module.css'\nimport DialogItem from './DialogItem/DialogItem'\nimport Message from './Message/Message'\nimport React, {FC} from 'react'\nimport {\n    DialogType,\n    MessageType,\n    dialogsActions,\n} from 'redux/dialogs-reducer';\nimport {useAppDispatch, useAppSelector} from 'redux/store';\nimport {Navigate} from 'react-router-dom';\nimport {useFormik} from 'formik';\n\n\nconst Dialogs: FC = () => {\n    const isAuth = useAppSelector<boolean>((state) => state.auth.isAuth)\n    const messages = useAppSelector<Array<MessageType>>(state => state.dialogsPage.messages);\n    const dialogs = useAppSelector<Array<DialogType>>(state => state.dialogsPage.dialogs);\n\n    const dialogsElements = dialogs.map(obj => <DialogItem name={obj.name} id={obj.id} key={obj.id}/>)\n    const messageElements = messages.map(obj => <Message message={obj.message} key={obj.id}/>)\n\n    if (!isAuth) {\n        return <Navigate to={'/login'}/>\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messageElements}</div>\n                <AddMessageForm/>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs\n\ntype FormikErrorType = {\n    newMessageBody?: string\n}\nexport const AddMessageForm = () => {\n    const dispatch = useAppDispatch()\n    const formik = useFormik({\n        initialValues: {\n            newMessageBody: '',\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {}\n            if (!values.newMessageBody) {\n                errors.newMessageBody = 'Required'\n            } else if (values.newMessageBody.length > 10) {\n                errors.newMessageBody = 'The post should be less than 10 symbols'\n            }\n            return errors\n        },\n        onSubmit: values => {\n            formik.resetForm()\n            dispatch(dialogsActions.sendMessage({newMessageBody: values.newMessageBody}))\n        },\n    });\n\n    return (\n        <form onSubmit={formik.handleSubmit}>\n            <div>\n                <textarea placeholder={'enter your message'} {...formik.getFieldProps('newMessageBody')}/>\n                {formik.errors.newMessageBody && formik.touched.newMessageBody ?\n                    <div style={{color: 'red'}}>{formik.errors.newMessageBody}</div> : null}\n            </div>\n            <div>\n                <button type={'submit'}>Send</button>\n            </div>\n        </form>\n    )\n}"],"names":["props","_jsx","children","NavLink","to","concat","id","className","_ref","isActive","s","undefined","name","message","isAuth","useAppSelector","state","auth","messages","dialogsPage","dialogsElements","dialogs","map","obj","DialogItem","messageElements","Message","_jsxs","AddMessageForm","Navigate","dispatch","useAppDispatch","formik","useFormik","initialValues","newMessageBody","validate","values","errors","length","onSubmit","resetForm","dialogsActions","handleSubmit","_objectSpread","placeholder","getFieldProps","touched","style","color","type"],"sourceRoot":""}