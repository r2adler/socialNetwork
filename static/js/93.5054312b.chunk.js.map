{"version":3,"file":"static/js/93.5054312b.chunk.js","mappings":"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","sources":["webpack://samuray_way_functional_react_redux_toolkit/./src/components/common/Paginator/Paginator.module.css?6caa","components/common/Paginator/Paginator.tsx","redux/users_reducer/users_selectors.ts","webpack://samuray_way_functional_react_redux_toolkit/./src/components/Users/User/user.module.css?e76d","components/Users/User/user.tsx","components/Users/users_search/useUsersSearch.ts","components/Users/users_search/UesersSearchForm.tsx","components/Users/users.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"pages\":\"Paginator_pages__87RmH\",\"selectedPage\":\"Paginator_selectedPage__VbWz1\"};","import styles from './Paginator.module.css'\r\nimport { useAppDispatch, useAppSelector} from 'redux/store';\r\nimport {usersThunks} from 'redux/users_reducer/users-reducer';\r\nimport {FC, memo, useEffect, useState} from 'react';\r\nimport {getCurrentPage, getFilter, getPageSize, getTotalItemsCount} from 'redux/users_reducer/users_selectors';\r\n\r\n\r\nexport const Paginator: FC = memo(() => {\r\n    const dispatch = useAppDispatch()\r\n    const state = useAppSelector(state => state)\r\n    const currentPage = getCurrentPage(state)\r\n    const totalItemsCount = getTotalItemsCount(state)\r\n    const pageSize = getPageSize(state)\r\n    const filter = getFilter(state)\r\n    const portionSize = 10\r\n\r\n    useEffect(() => {\r\n        dispatch(usersThunks.getUsers({page: currentPage, pageSize, filter}))\r\n    }, []);\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i += 1) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const onPageChanged = (page: number) => {\r\n        dispatch(usersThunks.getUsers({page, pageSize, filter}))\r\n    }\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const [portionNumber, setPortionNumber] = useState<number>(1)\r\n    const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                portionNumber > 1 &&\r\n                <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => (\r\n                        <span\r\n                            key={p}\r\n                            className={currentPage === p ? styles.pages + ' ' + styles.selectedPage : styles.pages}\r\n                            onClick={() => onPageChanged(p)}\r\n                        >\r\n                    {p}\r\n                    </span>))\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>\r\n            }\r\n        </div>\r\n    )\r\n})","import {FilterType} from 'redux/users_reducer/users-reducer';\r\nimport {AppRootStateType} from 'redux/store';\r\nimport {UserType} from 'api/usersAPI';\r\n\r\nexport const getUsers = (state: AppRootStateType): UserType[] => state.usersPage.users\r\nexport const getPageSize = (state: AppRootStateType): number => state.usersPage.pageSize\r\nexport const getTotalItemsCount = (state: AppRootStateType): number => state.usersPage.totalItemsCount\r\nexport const getCurrentPage = (state: AppRootStateType): number => state.usersPage.currentPage\r\nexport const getIsFetching = (state: AppRootStateType): boolean => state.usersPage.isFetching\r\nexport const getFollowingInProgress = (state: AppRootStateType): number[] => state.usersPage.followingInProgress\r\nexport const getFilter = (state: AppRootStateType): FilterType => state.usersPage.filter","// extracted by mini-css-extract-plugin\nexport default {\"userPhoto\":\"user_userPhoto__BZPt2\"};","import React, {FC} from 'react';\r\nimport userPhoto from 'assets/images/user.png';\r\nimport {usersThunks} from 'redux/users_reducer/users-reducer';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType, useAppDispatch} from 'redux/store';\r\nimport styles from 'components/Users/User/user.module.css'\r\nimport {UserType} from 'api/usersAPI';\r\n\r\n\r\nexport const User: FC<UserPropsType> = ({user}) => {\r\n    const dispatch = useAppDispatch()\r\n    const followingInProgress = useSelector<AppRootStateType, number[]>(state => state.usersPage.followingInProgress)\r\n\r\n    return (\r\n        <div key={user.id}>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img\r\n                            src={user.photos.small ? user.photos.small : userPhoto}\r\n                            className={styles.userPhoto}\r\n                            alt=\"img\"\r\n                        />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed ?\r\n                        <button\r\n                            disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => dispatch(usersThunks.unfollow({userId: user.id}))}\r\n                        >\r\n                            Unfollow\r\n                        </button>\r\n                        :\r\n                        <button\r\n                            disabled={followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => dispatch(usersThunks.follow({userId: user.id}))}\r\n                        >\r\n                            Follow\r\n                        </button>\r\n                    }\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{'u.location.country'}</div>\r\n                    <div>{'u.location.city'}</div>\r\n                </span>\r\n            </span>\r\n        </div>)\r\n};\r\n\r\ntype UserPropsType = {\r\n    user: UserType\r\n}\r\n\r\n","import {useAppDispatch, useAppSelector} from 'redux/store';\r\nimport {useFormik} from 'formik';\r\nimport {FilterType, usersThunks} from 'redux/users_reducer/users-reducer';\r\n\r\nexport const useUsersSearch = () => {\r\n    const dispatch = useAppDispatch()\r\n    const pageSize = useAppSelector((state) => state.usersPage.pageSize)\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(usersThunks.getUsers({page: 1, pageSize, filter}))\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            term: '',\r\n            friend: 'null'\r\n        },\r\n        onSubmit: (values: FormType, {setSubmitting}: any) => {\r\n            const filter2 = {\r\n                term: values.term, friend: values.friend === 'true' ? true\r\n                    : values.friend === 'false' ? false : null\r\n            }\r\n            onFilterChanged(filter2)\r\n            setSubmitting(false)\r\n        },\r\n    })\r\n    return {formik}\r\n}\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: 'true' | 'false' | 'null'\r\n}","import {FC} from 'react';\r\nimport {useUsersSearch} from 'components/Users/users_search/useUsersSearch';\r\n\r\nexport const UsersSearchForm: FC = () => {\r\n    const {formik} = useUsersSearch()\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <input type=\"text\" placeholder={'name'} {...formik.getFieldProps('term')}/>\r\n            <select  {...formik.getFieldProps('friend')}>\r\n                <option value=\"null\">All</option>\r\n                <option value=\"true\">Only followed</option>\r\n                <option value=\"false\">Only unfollowed</option>\r\n            </select>\r\n            <button type={'submit'}>Find</button>\r\n        </form>\r\n    )\r\n}\r\n","import React, {FC, memo} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from 'redux/store';\r\nimport {Paginator} from 'components/common/Paginator/Paginator';\r\nimport {User} from 'components/Users/User/user';\r\nimport {UserType} from 'api/usersAPI';\r\nimport {UsersSearchForm} from 'components/Users/users_search/UesersSearchForm';\r\n\r\n\r\nconst Users: FC = memo(() => {\r\n    const users = useSelector<AppRootStateType, UserType[]>(state => state.usersPage.users);\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm/>\r\n            <Paginator/>\r\n            <div>\r\n                {\r\n                    users.map(user => <User key={Math.random()} user={user}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\nexport default Users\r\n\r\n\r\n"],"names":["Paginator","memo","dispatch","useAppDispatch","state","useAppSelector","currentPage","usersPage","getCurrentPage","totalItemsCount","getTotalItemsCount","pageSize","getPageSize","filter","getFilter","useEffect","usersThunks","page","pagesCount","Math","ceil","pages","i","push","portionCount","_useState","useState","_useState2","_slicedToArray","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","_jsxs","children","_jsx","onClick","p","map","className","styles","User","_ref","user","followingInProgress","useSelector","NavLink","to","id","src","photos","small","userPhoto","alt","followed","disabled","some","userId","name","status","useUsersSearch","formik","useFormik","initialValues","term","friend","onSubmit","values","setSubmitting","filter2","UsersSearchForm","handleSubmit","_objectSpread","type","placeholder","getFieldProps","value","Users","users","random"],"sourceRoot":""}